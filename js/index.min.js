/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
var __webpack_exports__ = {};

;// CONCATENATED MODULE: ./src/js/modules/timer.js
const timer = (elem, deadline) => {
  const createElements = () => {
    elem.innerHTML = `
      <p class="main-promotion__timer-title">
        До конца акции:
          </p>
          <div class="timer-wrapper">
              <p class="timer__item timer__item--days">
                <span class="big-numbers">3</span>
                <span class="medium-text">дня</span>
              </p>
              <p class="timer__item timer__item--hours">
                <span class="big-numbers">8</span>
                <span class="medium-text">часов</span>
              </p>
              <p class="timer__item timer__item--minutes">
                <span class="big-numbers">43</span>
                <span class="medium-text">минуты</span>
              </p>
              <p class="timer__item timer__item--seconds visually-hidden">
                  <span class="big-numbers">43</span>
                  <span class="medium-text">секунд</span>
                </p>
            </div>
          `;
  };
  const getTimeRemaining = () => {
    const dateStop = new Date(deadline).getTime();
    const dateNow = Date.now();
    const timeRemaring = dateStop - dateNow;

    // секунды
    const seconds = Math.floor(timeRemaring / 1000 % 60);
    // минуты
    const minutes = Math.floor(timeRemaring / 1000 / 60 % 60);
    // часы
    const hours = Math.floor(timeRemaring / 1000 / 60 / 60 % 24);
    // дни
    const days = Math.floor(timeRemaring / 1000 / 60 / 60 / 24);
    return {
      timeRemaring,
      seconds,
      minutes,
      hours,
      days
    };
  };

  // функция склонения текста
  const decOfNum = (number, titles) => {
    let decCache = [],
      decCases = [2, 0, 1, 1, 1, 2];
    if (!decCache[number]) decCache[number] = number % 100 > 4 && number % 100 < 20 ? 2 : decCases[Math.min(number % 10, 5)];
    return titles[decCache[number]];
  };
  const start = (timerDays, timerHours, timerMinutes, timerSeconds, textDays, textHours, textMinutes, textSeconds, blockDays, blockSeconds, blockAllTimer) => {
    const newTimer = getTimeRemaining();
    timerDays.textContent = newTimer.days;
    timerHours.textContent = newTimer.hours;
    timerMinutes.textContent = newTimer.minutes;
    timerSeconds.textContent = newTimer.seconds;
    textDays.textContent = decOfNum(timerDays.textContent, ['день', 'дня', 'дней']);
    textHours.textContent = decOfNum(timerHours.textContent, ['час', 'часа', 'часов']);
    textMinutes.textContent = decOfNum(timerMinutes.textContent, ['минуты', 'минуты', 'минут']);
    textSeconds.textContent = decOfNum(timerSeconds.textContent, ['секунда', 'секунды', 'секунд']);
    if (newTimer.days === 0) {
      blockDays.classList.add('visually-hidden');
      blockSeconds.classList.remove('visually-hidden');
    } else if (newTimer.days >= 1) {
      blockDays.classList.remove('visually-hidden');
      blockSeconds.classList.add('visually-hidden');
    } else if (newTimer.days < 0) {
      blockAllTimer.classList.add('visually-hidden');
      document.querySelector('.title_size_1').textContent = 'Акция закончилась, сорян((';
    }
    ;
    const intervalId = setTimeout(getElements, 1000);
  };
  const getElements = () => {
    if (!elem.hasChildNodes()) {
      createElements();
    }
    const timerDays = document.querySelector('.timer__item--days .big-numbers');
    const timerHours = document.querySelector('.timer__item--hours .big-numbers');
    const timerMinutes = document.querySelector('.timer__item--minutes .big-numbers');
    const timerSeconds = document.querySelector('.timer__item--seconds .big-numbers');
    const textDays = document.querySelector('.timer__item--days .medium-text');
    const textHours = document.querySelector('.timer__item--hours .medium-text');
    const textMinutes = document.querySelector('.timer__item--minutes .medium-text');
    const textSeconds = document.querySelector('.timer__item--seconds .medium-text');
    const blockDays = document.querySelector('.timer__item--days');
    const blockSeconds = document.querySelector('.timer__item--seconds');
    const blockAllTimer = document.querySelector('.main-promotion__timer');
    start(timerDays, timerHours, timerMinutes, timerSeconds, textDays, textHours, textMinutes, textSeconds, blockDays, blockSeconds, blockAllTimer);
  };
  getElements();
};
;// CONCATENATED MODULE: ./src/js/modules/acc.js
const acc = (items, list) => {
  items.forEach((item, index) => {
    item.addEventListener('click', () => {
      for (let i = 0; i < items.length; i++) {
        if (index === i) {
          list[i].style.height = items[i].classList.contains('footer-item_active') ? '' : `${list[i].scrollHeight}px`;
          items[i].classList.toggle('footer-item_active');
          items[i].classList.toggle('footer__title--type_open');
          items[i].classList.toggle('footer__title--type_close');
        } else {
          items[i].classList.remove('footer__title--type_open');
          items[i].classList.remove('footer-item_active');
          list[i].style.height = 0;
          items[i].classList.add('footer__title--type_close');
        }
      }
    });
  });
};
const deleteAcc = (items, list) => {
  const newItems = [];
  newItems.push(items[0], items[1]);
  const newlist = [];
  newlist.push(list[0], list[1]);
  newItems.forEach((item, index) => {
    item.classList.remove('footer__title--type_open');
    item.classList.remove('footer-item_active');
    item.classList.add('footer__title--type_close');
  });
  newlist.forEach((item, index) => {
    item.removeAttribute("style");
  });
};
;// CONCATENATED MODULE: ./src/js/modules/menuShow.js
const menuControl = (btn, menu) => {
  btn.addEventListener('click', () => {
    document.body.classList.toggle('disable-scroll');
    btn.classList.toggle('header__btn-menu--type_close');
    btn.classList.toggle('header__btn-menu--type_open');
    menu.classList.toggle('header__menu-group--type_close');
  });
};
;// CONCATENATED MODULE: ./src/js/modules/pagination.js
const paginationControl = (btnPrev, btnNext, pagesBtn, currentActive) => {
  pagesBtn.forEach((item, index) => {
    if (index + 1 === currentActive) {
      item.classList.add('item-active');
    } else {
      item.classList.remove('item-active');
    }
  });
  if (currentActive === 1) {
    btnPrev.setAttribute('disabled', 'disabled');
    btnPrev.querySelector('.item-icon').classList.add('item-icon-disabled');
    btnNext.querySelector('.item-icon').classList.remove('item-icon-disabled');
  } else if (currentActive === 3) {
    btnNext.setAttribute('disabled', 'disabled');
    btnNext.querySelector('.item-icon').classList.add('item-icon-disabled');
    btnPrev.querySelector('.item-icon').classList.remove('item-icon-disabled');
  } else {
    btnPrev.removeAttribute('disabled', 'disabled');
    btnNext.removeAttribute('disabled', 'disabled');
    btnPrev.querySelector('.item-icon').classList.remove('item-icon-disabled');
    btnNext.querySelector('.item-icon').classList.remove('item-icon-disabled');
  }
  const update = () => {
    pagesBtn.forEach((item, index) => {
      if (index + 1 === currentActive) {
        item.click();
        item.classList.add('item-active');
      } else {
        item.classList.remove('item-active');
      }
    });
  };
  btnNext.addEventListener('click', () => {
    currentActive++;
    if (currentActive >= pagesBtn.length) {
      currentActive = pagesBtn.length;
    } else {
      btnPrev.removeAttribute('disabled');
    }
    update();
  });
  btnPrev.addEventListener('click', () => {
    currentActive--;
    if (currentActive <= 1) {
      currentActive = 1;
    } else {
      btnPrev.removeAttribute('disabled');
    }
    update();
  });
};
;// CONCATENATED MODULE: ./src/js/modules/renderArticleList.js
const dateNow = () => {
  const option = {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  };
  return new Date().toLocaleString('ru', option);
};
const renderGoods = async arrData => {
  console.log('arrData', arrData);
  const articlesList = document.querySelector('.articles__list');
  const date = dateNow();
  arrData.forEach(item => {
    const topic = document.createElement('a');
    topic.className = 'articles__item';
    topic.id = `${item.id}`;
    topic.href = `article.html?id=${item.id}`;
    topic.setAttribute('aria-label', item.title);
    topic.className = 'topic';
    topic.innerHTML = `
    ${item.image ? `<img src="${image}" alt="Изображение ${item.time}" class="topic__img">` : `<source srcset="./img/no-img.avif" type="image/avif">
          <source srcset="./img/no-img.webp" type="image/webp">
          <img class="topic__img" src="./img/no-img.png" width="195"
          height="195" loading="lazy" alt="Изображение для статьи отсутствует">`}
      <div class="topic__wrapper">
        <div class="topic__title-wrapper">
          <h2 class="topic__title">${item.title}</h2>
          ${item.time ? `<time class="topic__time" datetime="${item.time}">${item.time}</time>` : `<time class="topic__time" datetime="${date}">${date}</time>`}
      </div>

      <div class="topic__user-box">
        <figure class="topic__user">
          <img src="./img/icon-view.svg" alt="Иконка просмотра" class="topic__views-icon">
          <figcaption class="topic__views-text">${0}</figcaption>
        </figure>
        <figure class="topic__user">
          <img src="./img/icon-chat.svg" alt="Иконка чата" class="topic__views-icon">
          <figcaption class="topic__views-text">${0}</figcaption>
        </figure>

    </div>
    `;
    articlesList.append(topic);
  });
  document.querySelector('.pagination').classList.remove('visually-hidden');
};
;// CONCATENATED MODULE: ./src/js/modules/createElements.js
const createElements = (tagName, className, attributeName = null) => {
  const tag = document.createElement(`${tagName}`);
  if (typeof className === 'string') {
    tag.classList.add(`${className}`);
  } else {
    className.forEach(className => {
      tag.classList.add(className);
    });
  }
  attributeName ? Object.keys(attributeName).forEach(key => {
    tag.setAttribute(key, attributeName[key]);
  }) : '';
  return tag;
};
const createLastLink = (data, category) => {
  console.log('createLastLink !!!', data);
  const breadcrumb = document.querySelector('.breadcrumb');
  const breadcrumbItem = createElements('li', 'breadcrumb__item');
  if (category) {
    breadcrumbItem.innerHTML = `
    <a href="./category.html?${data.category}" class="link-to-home">${data.category}</a>
    <img src="./img/breadcrumb-icon.svg" alt="Иконка хлебной крошки" class="breadcrumb-icon"
        aria-label="data.category">
    `;
  } else {
    breadcrumbItem.innerHTML = data.title;
  }
  breadcrumb.append(breadcrumbItem);
};
;// CONCATENATED MODULE: ./src/js/modules/renderArticlePage.js


const date = dateNow();
const renderArticle = async (id, articleModal, dataAutor, dataArticle) => {
  createLastLink(dataArticle);
  const params = new URLSearchParams(window.location.search);
  params.append('id', `${id}`);
  const textWrapper = document.createElement('div');
  textWrapper.classList.add('article__text-wrapper');
  textWrapper.innerHTML = `
  <h2 class="article__title">${dataArticle.title}</h2>
  <p class="article__paragraf">${dataArticle.body}</p>
  `;
  const footer = document.createElement('div');
  footer.classList.add('article__footer');
  footer.innerHTML = `
    <a class="article__btn-back" href="#" onclick="window.history.go(-1); return false;">
    <img class="article__btn-back-icon" src="./img/to-back-icon.svg" alt="Иконка стрелки">
    <span class="btn-text">
      К списку статей
    </span>
    </a>

    <div class="article__autor-block">
    <h4 class="article__autor-name">${dataAutor.name ? dataAutor.name : ''}</h4>

    <span class="article__time">${date}</span>

    <div class="article__user-box">

      <figure class="article__user">
        <img src="./img/icon-view.svg" alt="Иконка просмотра" class="article__views-icon">
        <figcaption class="article__views-text">${0}</figcaption>
      </figure>
      <figure class="article__user">
        <img src="./img/icon-chat.svg" alt="Иконка чата" class="article__chat-icon">
        <figcaption class="article__chat-text">${0}</figcaption>
      </figure>

    </div>

    </div>
  `;
  articleModal.classList.add('article_visible');
  articleModal.append(textWrapper, footer);
  document.querySelector('.adds-banners').classList.remove('visually-hidden');
};
;// CONCATENATED MODULE: ./src/js/modules/preloader.js
const preload = {
  circle: `<svg width="322" height="322" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M119.088 185.106 82.568 106.6H72.47v97.943h12.452v-66.055l30.294 66.055h7.743l30.371-66.055v66.055h12.452V106.6h-10.098l-36.596 78.506Zm83.973 8.58v-34.243h45.859v-10.857h-45.859v-31.129h49.731V106.6h-62.183v97.943h63.777v-10.857h-51.325Z" fill="#010101"/><path d="M161.037 305.207c79.663 0 144.243-64.58 144.243-144.244C305.28 81.3 240.7 16.72 161.037 16.72c-79.664 0-144.244 64.58-144.244 144.243 0 79.664 64.58 144.244 144.244 144.244Z" stroke="url(#a)" stroke-width="33"/><defs><linearGradient id="a" x1="161.037" y1="16.72" x2="161.037" y2="305.207" gradientUnits="userSpaceOnUse"><stop stop-color="#FAD126" stop-opacity=".996"/><stop offset="1" stop-color="#FF544F"/></linearGradient></defs></svg>`,
  overlay: document.createElement('div'),
  show() {
    this.overlay.classList.add('overlay');
    this.overlay.innerHTML = this.circle;
    document.body.append(this.overlay);
  },
  remove() {
    this.overlay.remove();
  }
};
/* harmony default export */ var preloader = ((/* unused pure expression or super */ null && (preload)));
;// CONCATENATED MODULE: ./src/js/modules/uploadArticles.js
const loadGoods = async url => {
  const result = await fetch(url);
  const data = await result.json();
  console.log('data load', data);
  return data.data;
};
const loadAutor = async userId => {
  const item = await fetch(`https://gorest.co.in/public-api/users/${userId}`);
  const autorArr = await item.json();
  return autorArr.data;
};
const loadArticle = async id => {
  const item = await fetch(`https://gorest.co.in/public-api/posts/${id}`);
  const data = await item.json();
  return data.data;
};
const loadProducts = (url, {
  methed = 'get',
  callback,
  body = {},
  headers,
  parentEl = null,
  elements = null
}) => {
  return new Promise((resolve, reject) => {
    try {
      const xhr = new XMLHttpRequest();
      xhr.open(methed, url);
      if (headers) {
        for (const [key, value] of Object.entries(headers)) {
          xhr.setRequestHeader(key, value);
        }
      }
      xhr.addEventListener('load', () => {
        if (xhr.status < 200 || xhr.status >= 300) {
          return callback(new Error(xhr.status), xhr.response);
        }
        let data = JSON.parse(xhr.response);
        console.log('httpRequest data = ', data);
        if (url.includes("discount")) data = data.filter(item => +item.discount > 0);
        if (callback) resolve(callback(data, elements));
        ;
      });
      xhr.addEventListener('error', () => {
        return callback(new Error(xhr.status), xhr.response);
      });
      xhr.send(JSON.stringify(body));
    } catch (err) {
      reject(callback(new Error(err)));
    }
  });
};
;// CONCATENATED MODULE: ./src/js/modules/renderProducts.js


//! надо дописать данную функцию на атоматическое обновление сумм в коризне
//  export const renderPrices = (data) => {
//   const finishSum = document.querySelector()
// }

const updateQuantity = data => {
  return data.reduce((acc, item) => acc + item.count, 0);
};
const iterateArray = (arr, maxQuantity) => {
  if (arr.length >= maxQuantity) {
    arr = arr.slice(0, maxQuantity);
  } else {
    const newItem = arr[Math.floor(Math.random() * arr.length)];
    arr.push(newItem);
    iterateArray(arr, maxQuantity);
  }
  return arr;
};
const getCategory = (arr, str) => {
  return arr.filter(item => item.category === str);
};
const filterProducts = async (data, elements) => {
  let newData;
  if (elements.category) {
    newData = iterateArray(getCategory(data, elements.category), elements.maxQuantity);
  } else {
    newData = iterateArray(data, elements.maxQuantity);
  }
  const template = document.createDocumentFragment();
  const title = createElements(`${elements.title.tag}`, elements.title.class.split(' '));
  title.innerHTML = elements.title.value;
  console.log('createElements', title);
  template.append(title);
  const itemsList = createElements('ul', elements.list.class.split(' '));
  newData.forEach(item => {
    const itemLi = createElements('li', 'profitable__item');
    const itemLink = createElements('a', `${elements.link.class}`, {
      href: `${elements.link.href}${item.id ? item.id : item}`,
      'aria-label': `${item.title}`
    });
    if (typeof item === "object" && item !== null) {
      itemLink.innerHTML = `
      <img src="${elements.src}${item.image}" alt="${item.title}" class="profitable__item-img" width="420" height="295" loading="lazy">
      <div class="profitable__price">
        <span class="new-price">${item.price - item.price * (item.discount / 100)} ₽</span>
        <span class="old-price">${item.price} ₽</span>
      </div>
      <h4 class="profitable__title-item">${item.title}</h4>
      `;
      if (+item.discount > 0) {
        const discountData = createElements('span', 'discount');
        discountData.innerHTML = `${-item.discount}%`;
        itemLink.append(discountData);
      }
    } else {
      itemLink.innerHTML = `${item}`;
    }
    itemLi.append(itemLink);
    itemsList.append(itemLi);
  });
  template.append(itemsList);
  return template;
};
const renderItemProduct = (data, elements) => {
  console.log('renderItemProduct', data);
  createLastLink(data, true);
  createLastLink(data);
  const card = createElements('div', 'card');
  card.innerHTML = `
  <${elements.title.tag} class="card__title">${data.title}</${elements.title.tag}>
        <div class="card__wrapper">

          <div class="card__price-block">

            <img class="card__img card__img--sale_on" src="${elements.src}${data.image}" alt="${data.title}" height="427">

            ${data.discount > 0 ? `<span class="card__sale">-${data.discount}%</span>` : ''}

            <div class="card__price">

              <div class="card__prices">
                <div class="card__price-container">
                  <span class="card__new-price">${Math.round(data.price - data.price * (data.discount / 100))} ₽</span>
                  ${+data.discount > 0 ? `<span class="card__old-price">${Math.round(data.price)}  ₽` : ``}

                </div>
                <p class="card__credit">
                  В кредит от <span class="card__credit-sum">${data.discount ? `${Math.round(data.price * (1 - data.discount / 100) / 12)}` : `${Math.round(data.price / 12)}`}</span> ₽
                </p>
              </div>

              <div class="card__buttons">
                <button class="card__btn-add" type="button">Добавить в корзину</button>
                <button class="card__btn-favorite" type="button" aria-label="Добавить в избранное"></button>
              </div>

              <div class="card__info">
                <div class="card__shiping">
                  <span class="card__shiping-title">
                    Доставка
                  </span>
                  <span class="card__shiping-time">
                    1-3 января
                  </span>
                </div>
                <div class="card__salesman">
                  <span class="card__salesman-title">
                    Продавец
                  </span>
                  <span class="card__salesman-name">
                    ShopOnline
                  </span>
                </div>
              </div>

              <button class="card__btn-price-drop">
                Узнать о снижении цены
              </button>

            </div>

          </div>

          <h3 class="card__discription-title">Описание:</h3>
          <p class="card__paragraf">${data.description}</p>

        </div>
  `;
  return {
    card,
    product: data
  };
};
const renderImgList = data => {
  console.log('renderImgList', data);
  const list = createElements('ul', 'buy__ship-list');
  data.forEach(image => {
    const item = createElements('li', 'buy__ship-item');
    const img = createElements('img', 'buy__ship-img', {
      alt: 'Изображение товара',
      width: 80,
      height: 80,
      src: image
    });
    item.append(img);
    list.append(item);
  });
  return list;
};
const renderBasket = (arr, data) => {
  const buyList = createElements('ul', 'buy__list');
  const buyArr = arr.filter(item => {
    return data.some(element => element.id === item.id);
  }).map(item => {
    const matchingElement = data.find(element => element.id === item.id);
    return {
      ...item,
      count: matchingElement.count
    };
  });
  const allImg = [];
  let allCount = 0;
  let allSum = 0;
  let alldiscount = 0;
  buyArr.forEach(item => {
    const itemBuy = createElements('li', 'buy__item', {
      id: item.id
    });
    itemBuy.innerHTML = `
      <div class="buy__sel-wrapper">
        <button class="buy__btn-sel buy__btn-sel--type_on">
          <img src="./img/done.svg" alt="" class="icone-done">
        </button>
        <img src="https://quickest-cubic-pyroraptor.glitch.me/${item.image}" alt="Изображение товара" class="buy__img" width="130px"
          max-height="130px">
      </div>

      <div class="buy__description">
        <p class="buy__title-prod">${item.title}</p>
        <p class="buy__color">ID товара: ${item.id}</p>
      </div>

    <div class="buy__quantity">
      <button class="buy__btn-minus">-</button>
      <span class="buy__digital">${item.count}</span>
      <button class="buy__btn-plus">+</button>
    </div>

    <div class="buy__price">
      <span class="buy__new-price">${Math.round(item.price - item.price * item.discount / 100)} ₽</span>
      <span class="buy__old-price">${item.price} ₽</span>
      <span class="buy__credit">В кредит от ${Math.round(item.price / 12)} ₽ </span>
    </div>

    `;
    allImg.push(`https://quickest-cubic-pyroraptor.glitch.me/${item.image}`);
    allSum += Math.round((item.price - item.price * (item.discount / 100)) * item.count);
    allCount += item.count;
    alldiscount += Math.round(item.price * item.discount / 100);
    buyList.append(itemBuy);
  });
  const imagesBlock = renderImgList(allImg);
  return {
    buyList,
    allSum,
    allCount,
    alldiscount,
    imagesBlock
  };
};
;// CONCATENATED MODULE: ./src/js/modules/serviceStorage.js
const getStorage = () => {
  const arr = localStorage.getItem('basket') ? JSON.parse(localStorage.getItem('basket')) : [];
  console.log('getStorage', arr);
  return arr;
};
const serviceStorage_setStorage = (key, value) => {
  const obj = JSON.stringify(value);
  localStorage.setItem(key, obj);
};
const removeStorage = (id, data) => {
  id = +id;
  for (let i = 0; i < data.length; i++) {
    if (id === data[i].id) {
      data.splice(i, 1);
    }
  }
  serviceStorage_setStorage('basket', data);
};
const updateData = (product, arr) => {
  const foundItem = arr.find(item => item.id === product);
  console.log('foundItem', foundItem);
  if (foundItem) {
    foundItem.count++;
  } else {
    arr.push({
      id: product.id,
      count: 1,
      price: product.price,
      discount: product.discount
    });
  }
};
;// CONCATENATED MODULE: ./src/js/modules/control.js
// import {updateData} from './serviceStorage.js';

const basketControl = (data, products) => {
  console.log('basketControl', data);
  data.forEach(element => {
    element.addEventListener('click', e => {
      const target = e.target;
      if (target.closest('.buy__btn-plus')) {
        const id = target.closest('.buy__item').id;
        console.log('до', products[products.findIndex(item => item.id === id)].count);
        products[products.findIndex(item => item.id === id)].count += 1;
        console.log('после', products[products.findIndex(item => item.id === id)].count);
        console.log('итог', products);
        setStorage('basket', products);
      }
      ;
    });
  });
};
;// CONCATENATED MODULE: ./src/js/index.js











preload.show();
let url = window.location.pathname;
console.log(url);
let htmlName;
url.length < 2 ? htmlName = 'index' : htmlName = url.match(/\/(\w+)\.html/)[1];
const urlProdusts = 'https://quickest-cubic-pyroraptor.glitch.me/api/';
console.log('html', htmlName);
let searchParams = new URLSearchParams(window.location.search);
const footerTitles = document.querySelectorAll('.footer__title--type_close');
const footerlists = document.querySelectorAll('.footer__list--type_hidden');
const accRun = acc(footerTitles, footerlists);
const btnMenu = document.querySelector('.header__btn-menu');
const headerCatalog = document.querySelector('.header__menu-block--big_weight');
const footerCatalog = document.querySelector('.footer__catalog');
const profitableWrapper = document.querySelector('.profitable .container');
const basketGoods = document.querySelector('.number-goods');
const basketData = getStorage();
basketGoods.innerHTML = updateQuantity(basketData);
console.log('basketData', basketData);
console.log(updateQuantity(basketData));
btnMenu.disabled = true;
menuControl(btnMenu, document.querySelector('.header__menu-group'));
const getHeaderList = () => {
  return new Promise(function (resolve) {
    resolve(loadProducts(`${urlProdusts}category`, {
      methed: 'get',
      callback: filterProducts,
      parentEl: document.querySelector('.header__menu-block--big_weight'),
      elements: {
        title: {
          tag: 'h5',
          value: 'Каталог',
          class: 'header__menu-title'
        },
        link: {
          href: './category.html?',
          class: 'header__menu-item'
        },
        list: {
          class: 'header__menu-list header__menu-list--big_weight'
        },
        maxQuantity: 10
      }
    }));
  });
};
const getFooterList = () => {
  return new Promise(function (resolve) {
    resolve(loadProducts(`${urlProdusts}category`, {
      methed: 'get',
      callback: filterProducts,
      parentEl: document.querySelector('.footer__catalog'),
      elements: {
        title: {
          tag: 'h5',
          value: 'Каталог',
          class: 'footer__title footer__title--type_close'
        },
        link: {
          href: './category.html?',
          class: 'footer__item-link'
        },
        list: {
          class: 'footer__list footer__list--type_hidden'
        },
        maxQuantity: 10
      }
    }));
  });
};
if (htmlName === 'index') {
  const timerElem = document.querySelector('.main-promotion__timer');
  const deadline = timerElem.getAttribute('data-deadline');
  timer(timerElem, deadline);
  console.log('index !!!');
  const init = () => {
    return Promise.all([loadProducts(`${urlProdusts}goods/discount`, {
      methed: 'get',
      callback: filterProducts,
      parentEl: profitableWrapper,
      elements: {
        title: {
          tag: 'h4',
          value: 'Это выгодно!',
          class: 'profitable__title'
        },
        link: {
          href: './card.html?',
          class: 'header__menu-item'
        },
        list: {
          class: 'profitable__product-list'
        },
        src: 'https://quickest-cubic-pyroraptor.glitch.me/',
        maxQuantity: 8
      }
    }), getHeaderList(), getFooterList()]);
  };
  init().then(result => {
    console.log('init().then');
    btnMenu.disabled = false;
    profitableWrapper.append(result[0]);
    headerCatalog.append(result[1]);
    footerCatalog.append(result[2]);
    preload.remove();
  });
}
if (htmlName === 'blog') {
  const renderArticles = (page, result) => {
    const btnPrev = document.querySelector('.pagination__btn-prev');
    const btnNext = document.querySelector('.pagination__btn-next');
    const pagesBtn = document.querySelectorAll('.item');
    renderGoods(result);
    paginationControl(btnPrev, btnNext, pagesBtn, page);
  };
  let page = searchParams.get("page") ? searchParams.get("page") : 1;
  let currentPage = page;
  let currentActive = +currentPage;
  const data = () => {
    return Promise.all([loadGoods(`https://gorest.co.in/public-api/posts?page=${currentPage}`), getHeaderList(), getFooterList()]);
  };
  data().then(result => {
    renderArticles(currentActive, result[0]);
    headerCatalog.append(result[1]);
    footerCatalog.append(result[2]);
    btnMenu.disabled = false;
    preload.remove();
  });
}
if (htmlName === 'article') {
  let id = searchParams.get("id") ? searchParams.get("id") : '';
  const articleModal = document.querySelector('.article__wrapper');
  const init = () => {
    return Promise.all([loadAutor(id), loadArticle(id), getHeaderList(), getFooterList()]);
  };
  init().then(result => {
    console.log('Promise.all', result);
    renderArticle(id, articleModal, result[0], result[1]);
    console.log('result[1], result[2]', result[1], result[2]);
    headerCatalog.append(result[2]);
    footerCatalog.append(result[3]);
    btnMenu.disabled = false;
    preload.remove();
  });
}
if (htmlName === 'card') {
  const id = new URL(window.location.href).search.substring(1);
  console.log('id', id);
  const init = () => {
    return Promise.all([loadProducts(`${urlProdusts}goods/${id}`, {
      methed: 'get',
      callback: renderItemProduct,
      elements: {
        title: {
          tag: 'h4'
        },
        src: `https://quickest-cubic-pyroraptor.glitch.me/`
      }
    }), getHeaderList(), getFooterList(), loadProducts(`${urlProdusts}goods/discount`, {
      methed: 'get',
      callback: filterProducts,
      parentEl: profitableWrapper,
      elements: {
        title: {
          tag: 'h4',
          value: 'Это выгодно!',
          class: 'profitable__title'
        },
        link: {
          href: './card.html?',
          class: 'header__menu-item'
        },
        list: {
          class: 'profitable__product-list'
        },
        src: 'https://quickest-cubic-pyroraptor.glitch.me/',
        maxQuantity: 8
      }
    })]);
  };
  init().then(result => {
    console.log('basketData', basketData);
    console.log('result', result);
    document.querySelector('.page .container').append(result[0].card);
    headerCatalog.append(result[1]);
    footerCatalog.append(result[2]);
    profitableWrapper.innerHTML = '';
    profitableWrapper.append(result[3]);
    btnMenu.disabled = false;
    preload.remove();
    const btnAdd = document.querySelector('.card__btn-add');
    btnAdd.addEventListener('click', () => {
      updateData(result[0].product, basketData);
      basketGoods.innerHTML = updateQuantity(basketData);
      serviceStorage_setStorage('basket', basketData);
      console.log('basketData', basketData);
      console.log('добавил в localStorage');
    });
  });
  console.log('card !!!');
}
if (htmlName === 'basket') {
  const init = () => {
    return Promise.all([loadProducts(`${urlProdusts}goods/discount`, {
      methed: 'get',
      callback: filterProducts,
      parentEl: profitableWrapper,
      elements: {
        title: {
          tag: 'h4',
          value: 'Это выгодно!',
          class: 'profitable__title'
        },
        link: {
          href: './card.html?',
          class: 'header__menu-item'
        },
        list: {
          class: 'profitable__product-list'
        },
        src: 'https://quickest-cubic-pyroraptor.glitch.me/',
        maxQuantity: 8
      }
    }), getHeaderList(), getFooterList(), loadProducts(`${urlProdusts}goods/`, {
      methed: 'get',
      callback: renderBasket,
      elements: basketData
    })]);
  };
  init().then(result => {
    console.log('result', result);
    btnMenu.disabled = false;
    preload.remove();
    profitableWrapper.innerHTML = '';
    profitableWrapper.append(result[0]);
    headerCatalog.append(result[1]);
    footerCatalog.append(result[2]);
    document.querySelector('.buy__basket').append(result[3].buyList);
    document.querySelector('.buy__title-item--type_sum').innerHTML = result[3].allSum + ' ₽';
    document.querySelector('.buy__title-item--type_sum').innerHTML = result[3].allSum + ' ₽';
    document.querySelector('.buy__items-info-count--type_all_prod').innerHTML = `Товары, ${result[3].allCount} шт.`;
    document.querySelector('.buy__items-info--type_sum').innerHTML = result[3].allSum + result[3].alldiscount + ' ₽';
    document.querySelector('.buy__items-info--type_discount').innerHTML = result[3].alldiscount + ' ₽';
    document.querySelector('.buy__shiping-wrapper').append(result[3].imagesBlock);
    basketControl(document.querySelectorAll('.buy__item'), basketData);
  });
  console.log('basket !!!');
}
if (htmlName === 'category') {
  console.log('basket !!!');
  const category = decodeURI(window.location.href).split('?')[1];
  console.log('category', category);
  const init = () => {
    return Promise.all([loadProducts(`${urlProdusts}goods/`, {
      methed: 'get',
      callback: filterProducts,
      elements: {
        title: {
          tag: 'h4',
          value: category,
          class: 'profitable__title'
        },
        link: {
          href: './card.html?',
          class: 'header__menu-item'
        },
        list: {
          class: 'profitable__product-list'
        },
        src: 'https://quickest-cubic-pyroraptor.glitch.me/',
        maxQuantity: 24,
        category: category
      }
    }), getHeaderList(), getFooterList()]);
  };
  init().then(result => {
    console.log('init().then', result);
    profitableWrapper.append(result[0]);
    headerCatalog.append(result[1]);
    footerCatalog.append(result[2]);
    btnMenu.disabled = false;
    preload.remove();
  });
}
window.addEventListener('resize', e => {
  if (btnMenu.classList.contains('header__btn-menu--type_open')) {
    btnMenu.click();
  }
  ;
  if (window.innerWidth <= 500) {
    deleteAcc(footerTitles, footerlists);
  }
});
/******/ })()
;